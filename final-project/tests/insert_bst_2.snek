(record bst_node ((val int) (left bst_node) (right bst_node)))

(fun search_value ((val int) (root bst_node)) bool
    (if
        (= root NULL) 
        false
        (let
            ((curr_val (lookup root val)))
            (if 
                (= curr_val val)
                true
                (if (< val curr_val)
                    (search_value val (lookup root left))
                    (search_value val (lookup root right))
                )
            )
        )
    )
)

(fun insert_value ((val int) (root bst_node)) bst_node
    (if
        (= root NULL)
        (bst_node val NULL NULL)
        (let
            ((curr_val (lookup root val)))
            (block
                (if
                    (< val curr_val)
                    (set! root left (insert_value val (lookup root left)))
                    (if
                        (= val curr_val)
                        root
                        (set! root right (insert_value val (lookup root right)))
                    )
                )
                root
            )
        )
    )
)

(fun print_tree ((root bst_node)) int
    (if
        (= root NULL)
        -1
        (block
            (print_tree (lookup root left))
            (print (lookup root val))
            (print_tree (lookup root right))
        )
    )
)

(let
    ((root (bst_node 10 (bst_node 3 NULL NULL) (bst_node 12 (bst_node 11 NULL NULL) (bst_node 20 NULL NULL)))) (search_res (search_value input root)))
    (block 
        (print_tree root)
        (set! root (insert_value input root))
        (print_tree root)
        0
    )
)
